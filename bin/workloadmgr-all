#!/usr/bin/env python
# vim: tabstop=4 shiftwidth=4 softtabstop=4

# Copyright (c) 2013 TrilioData, Inc.
# All Rights Reserved.


"""Starter script for All workloadmgr services.

This script attempts to start all the workloadmgr services in one process.  Each
service is started in its own greenthread.  Please note that exceptions and
sys.exit() on the starting of a service are logged and the script will
continue attempting to launch the rest of the services.

"""

import eventlet
eventlet.monkey_patch()

import os
import sys


possible_topdir = os.path.normpath(os.path.join(os.path.abspath(
        sys.argv[0]), os.pardir, os.pardir))
if os.path.exists(os.path.join(possible_topdir, "workloadmgr", "__init__.py")):
    sys.path.insert(0, possible_topdir)

from workloadmgr.openstack.common import gettextutils
gettextutils.install('workloadmgr')

from workloadmgr import flags
from workloadmgr.openstack.common import log as logging
from workloadmgr import service
from workloadmgr import utils


if __name__ == '__main__':
    flags.parse_args(sys.argv)
    logging.setup("workloadmgr")
    LOG = logging.getLogger('workloadmgr.all')

    utils.monkey_patch()
    servers = []
    # workloadmgr-api
    try:
        servers.append(service.WSGIService('workloadmgr-service'))
    except (Exception, SystemExit):
        LOG.exception(_('Failed to load workloadmgr-service'))

    for binary in ['workloadmgr-scheduler']:
        try:
            servers.append(service.Service.create(binary=binary))
        except (Exception, SystemExit):
            LOG.exception(_('Failed to load %s'), binary)
    service.serve(*servers)
    service.wait()
